(function(){

'use strict';

angular.module('GeoBox')
.controller('MapController', MapController);

MapController.$inject = ['DocumentService', '$scope', '$interval', 'retroMode','nightMode'];
function MapController(DocumentService, $scope, $interval, retroMode, nightMode){
	var $ctrl = this;
	$ctrl.doc_markers = [];
	$ctrl.book_markers = [];
	$ctrl.user_marker = [];
	$ctrl.radius_marker = [];


	$ctrl.$onInit = function(){
      var hours = (new Date()).getHours();
      var mapStyle;
      if (hours > 6 && hours < 20) {
        mapStyle = retroMode;
      } else {
        mapStyle = nightMode;
      }

      $ctrl.handler = Gmaps.build('Google');
      $ctrl.handler.buildMap({ internal: {id: 'geolocation'}, provider:{
          zoom: 17,
          styles: JSON.parse(mapStyle),
          heading: 90,
          streetViewControl: false,
          fullscreenControl: false
          }}, updateLocation);
	};

	$scope.$on('documents:ready', updateMarkers);

	$ctrl.locUpdater = $interval(function(){
		if ($ctrl.handler){
			updateLocation();
		}
	}, 7500); // currently updates every 7.5 seconds

	$ctrl.$onDestroy = function(){
		$interval.cancel($ctrl.locUpdater);
	};

	function updateLocation(){
		if(navigator.geolocation) {
	        navigator.geolocation.getCurrentPosition(displayMapCallback);
		}
	}

	document.openBook = function(id){
	      DocumentService.fetchFilesInBook(id);
	}

	function updateMarkers(e,data){
		$ctrl.doc_markers = [];
		$ctrl.book_markers = [];
		DocumentService.docs.forEach(function(doc){
			var new_marker = $ctrl.handler.addMarker({
				lat: Number(doc.latitude),
				lng: Number(doc.longitude),
				picture: {
					url: "<%= image_path 'map_marker.png'%>",
					width: 45,
					height: 45
				},
				infowindow: '<div class="container-color-no-margin"><h5> Filename: ' + doc.filename + '</h5><p> Description: ' + doc.description + '</p><a class="btn btn-success" style="width: 100%" href=' + doc.download_url + '> Download </a></div>'
			});
			$ctrl.doc_markers.push(new_marker);
		});
		DocumentService.books.forEach(function(book){
      var new_marker = $ctrl.handler.addMarker({
          lat: Number(book.latitude),
          lng: Number(book.longitude),
          picture: {
              url: "<%= image_path 'book_map_marker.png'%>",
              width: 45,
              height: 45
          },
          infowindow: '<div class="container-color-no-margin"><h5> Book Name: ' + book.name + '</h5><p> Description: ' + book.description + '</p><button class="btn btn-success" style="width: 100%" onclick="openBook(' + book.id + ')"> Open Book </button></div>'
      });
      $ctrl.book_markers.push(new_marker);
		});
	}



	function displayMapCallback(position){
		if (shouldUpdate(position.coords)){
			$ctrl.user_location = position.coords;
			$ctrl.handler.removeMarkers($ctrl.doc_markers.concat($ctrl.user_marker).concat($ctrl.radius_marker));
			$ctrl.user_marker = $ctrl.handler.addMarker({
	            lat: position.coords.latitude,
	            lng: position.coords.longitude,
	            picture: {
	            	url: "<%= image_path 'user.png'%>",
	            	width: 65,
	            	height: 65
	            }
      });

			$ctrl.radius_marker = $ctrl.handler.addCircles(
          [{
              lat: position.coords.latitude,
              lng: position.coords.longitude,
              radius: 150
          }],
          {
              strokeColor: '#6ec7ee',
              fillColor: '#6ec7ee',
              strokeWeight: 2
          }
        );

			$ctrl.handler.map.centerOn($ctrl.user_marker);

			DocumentService.updateLocation(position.coords.latitude.toString(), position.coords.longitude.toString());
		}
  }

  function shouldUpdate(coordinates){
		if (!$ctrl.user_location) // should update when first rendering map.
			return true;
		else {
			let distance = google.maps.geometry.spherical.computeDistanceBetween(
				new google.maps.LatLng(coordinates.latitude, coordinates.longitude),
				new google.maps.LatLng($ctrl.user_location.latitude, $ctrl.user_location.longitude)
			);
			return distance > 20; // magikle
		}
	}
}

})();
